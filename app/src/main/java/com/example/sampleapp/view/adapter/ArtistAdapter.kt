package com.example.sampleapp.view.adapterimport android.content.Contextimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Filterimport android.widget.Filterableimport android.widget.Toastimport androidx.recyclerview.widget.RecyclerViewimport com.example.sampleapp.databinding.ItemLayoutBindingimport com.example.sampleapp.extensions.hideimport com.example.sampleapp.extensions.showimport com.example.sampleapp.model.Artistimport com.example.sampleapp.repository.ArtistDataRepositoryimport com.example.sampleapp.util.Messagesimport java.util.*class ArtistAdapter(        private val context: Context,        internal var list: MutableList<Artist>,        private val artistDataRepository: ArtistDataRepository) : RecyclerView.Adapter<ArtistAdapter.ViewHolder>(), Filterable {    private lateinit var binding: ItemLayoutBinding    private val originalList = list    init {        setHasStableIds(true)    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {        binding = ItemLayoutBinding                .inflate(LayoutInflater.from(parent.context), parent, false)        return ViewHolder(binding)    }    override fun onBindViewHolder(holder: ViewHolder, position: Int) {        val artist = list[position]        holder.apply {            bind(createOnClickListener(artist), artist)            itemView.tag = position        }    }    fun updateList(artists: List<Artist>) {        list.clear()        list.addAll(artists)        notifyDataSetChanged()    }    private fun createOnClickListener(artist: Artist): View.OnClickListener {        return View.OnClickListener {            with(artist) {                favorite = when {                    (favorite == null || favorite == false) -> {                        Toast.makeText(context, Messages.addedArtist, Toast.LENGTH_SHORT).show()                        true                    }                    else -> {                        Toast.makeText(context, Messages.removedArtist, Toast.LENGTH_SHORT).show()                        false                    }                }            }            artistDataRepository.update(artist.favorite!!, artist.id)            notifyDataSetChanged()        }    }    override fun getItemId(position: Int) = list[position].id.toLong()    override fun getItemViewType(position: Int) = list[position].id    override fun getItemCount() = list.size    class ViewHolder(private val binding: ItemLayoutBinding) : RecyclerView.ViewHolder(binding.root) {        fun bind(listener: View.OnClickListener, item: Artist) {            binding.apply {                click = listener                artist = item            }            statusFavorite(item)        }        private fun statusFavorite(item: Artist) {            when (item.favorite) {                true -> binding.ivFavote.show()                else -> binding.ivFavote.hide()            }        }    }    override fun getFilter(): Filter {        return object : Filter() {            override fun performFiltering(constraint: CharSequence?): FilterResults {                val results = FilterResults()                with(results) {                    if (constraint!!.isEmpty()) {                        values = list                        count = list.size                    } else {                        val filterList = ArrayList<Artist>()                        for (item in list) {                            if (item.name.toUpperCase(Locale.getDefault())                                            .startsWith(constraint.toString()                                                    .toUpperCase(Locale.getDefault())))                                filterList.add(item)                        }                        values = filterList                        count = list.size                    }                }                return results            }            @Suppress("UNCHECKED_CAST")            override fun publishResults(constraint: CharSequence?, results: FilterResults?) {                if (results?.count == 0 || constraint == "") {                    list = originalList                    notifyDataSetChanged()                } else {                    list = results?.values as MutableList<Artist>                    notifyDataSetChanged()                }            }        }    }}
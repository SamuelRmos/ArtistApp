package com.example.sampleapp.view.adapterimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport com.example.sampleapp.Appimport com.example.sampleapp.databinding.ItemLayoutBindingimport com.example.sampleapp.di.AppComponentimport com.example.sampleapp.extensions.hideimport com.example.sampleapp.extensions.showimport com.example.sampleapp.model.Artistimport com.example.sampleapp.model.FavoriteArtistimport com.example.sampleapp.repository.ArtistRepositoryimport com.example.sampleapp.repository.FavoriteRepositoryimport com.example.sampleapp.util.Messagesimport javax.inject.Injectclass ArtistAdapter : ListAdapter<Artist, ArtistAdapter.ViewHolder>(DiffCallback()) {    private lateinit var binding: ItemLayoutBinding    private var listArtist = mutableListOf<Artist>()    @Inject    lateinit var artistRepository: ArtistRepository    @Inject    lateinit var favoriteRepository: FavoriteRepository    @Inject    lateinit var app: App    init {        setHasStableIds(true)    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {        val appComponent = App.appComponent        appComponent.inject(this)        binding = ItemLayoutBinding            .inflate(LayoutInflater.from(parent.context), parent, false)        return ViewHolder(binding, artistRepository)    }    override fun onBindViewHolder(holder: ViewHolder, position: Int) {        val artist = getItem(position)        holder.apply {            bind(createOnClickListener(artist), artist)            itemView.tag = position        }    }    private fun createOnClickListener(artist: Artist): View.OnClickListener {        return View.OnClickListener {            when {                !artistRepository.getArtistFavorite(artist.id) -> insertFavorite(artist)                else -> removeFavorite(artist)            }            notifyDataSetChanged()        }    }    private fun insertFavorite(artist: Artist) {        artist.favorite = true        artistRepository.setArtistFavorite(artist)        val artistFavorite = getFavoriteArtist(artist)        val favorite = mutableListOf<FavoriteArtist>()        favorite.add(artistFavorite)        favoriteRepository.insertFavorite(favorite)        Toast.makeText(app, Messages.addedArtist, Toast.LENGTH_SHORT).show()    }    private fun removeFavorite(artist: Artist) {        artist.favorite = false        artistRepository.setArtistFavorite(artist)        favoriteRepository.removeFavorite(artist.id)        Toast.makeText(app, Messages.removedArtist, Toast.LENGTH_SHORT).show()    }    private fun getFavoriteArtist(artist: Artist): FavoriteArtist = FavoriteArtist(        artist.id,        artist.name,        artist.poster,        artist.favorite    )    fun geListItem(list: MutableList<Artist>) {        listArtist = list    }    override fun getItemId(position: Int): Long {        return listArtist[position].id.toLong()    }    override fun getItemViewType(position: Int): Int {        return listArtist[position].id    }    class ViewHolder(        private val binding: ItemLayoutBinding,        private val artistRepository: ArtistRepository    ) : RecyclerView.ViewHolder(binding.root) {        fun bind(listener: View.OnClickListener, item: Artist) {            binding.apply {                click = listener                artist = item                when {                    artistRepository.getArtistFavorite(item.id) -> binding.ivFavote.show()                    else -> binding.ivFavote.hide()                }            }        }    }    private class DiffCallback : DiffUtil.ItemCallback<Artist>() {        override fun areItemsTheSame(oldItem: Artist, newItem: Artist): Boolean {            return oldItem.id == newItem.id        }        override fun areContentsTheSame(oldItem: Artist, newItem: Artist): Boolean {            return oldItem == newItem        }    }}